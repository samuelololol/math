#include <iostream>
#include <vector>
#include <algorithm>
#include "node.h"
#include "line.h"
#include "fire.h"
#include "segment.h"

using namespace std;
int main(int argc, const char *argv[])
{
    vector<node_t> aa;

    node_t o(0,0);
    node_t a(1,2);
    node_t b(2,2);
    node_t c(1,1);
    node_t d(2,1);
    node_t e(3,3);
    node_t f(1,3);
    node_t g(3,2);


    line_t loc(o,c);
    line_t lcb(c,b);
    line_t loa(o,a);
    line_t krkr(node_t(10,10),node_t(0,1));
    cout << "normal line of "<< loc <<": " << loc.normalline(o) << endl;

    //line_t l1(o,c);
    //cout << l1 << endl;

    line_t l1(node_t(0,0), node_t(1,1));
    fire_t f1(node_t(0,0), node_t(1,1));
    fire_t f2(node_t(0,1), node_t(1,1));
    cout << f1 << endl;
    cout << f2 << endl;
    cout << "if f1==f2?" << (f1==f2) << endl;
    f1 = f2;
    cout << f1 << endl;
    cout << f2 << endl;
    cout << "if f1==f2?" << (f1==f2) << endl;


    aa.push_back(o);
    aa.push_back(a);
    aa.push_back(b);
    aa.push_back(c);
    aa.push_back(d);
    aa.push_back(e);
    aa.push_back(f);
    aa.push_back(g);


    sort (aa.begin(), aa.end());
    //aaiter = lower_bound(aa.begin(), aa.end(), g);


    if (binary_search(aa.begin(), aa.end(), node_t(1,2))) 
        cout << "here!" << endl;
    else
        cout << "not here!" << endl;

    if (loa == lcb)
        cout << "same" << endl;
    else
        cout<<  "different" << endl;



    //cout << "kk on kr?:" << krkr.ontheline(node_t(10,10)) << endl;
    cout << "test const: " << line_t(node_t(0,0),node_t(2,2))*line_t(node_t(10,10),node_t(0,1)) << endl;
    cout << "test const: " << line_t(node_t(0,0),node_t(2,2))*line_t(node_t(98,109),node_t(0,1)) << endl;
    node_t ccccc(line_t(node_t(0,0),node_t(2,2))*line_t(node_t(98,109),node_t(0,1)));
    cout << "ontheline?: " <<  line_t(node_t(0,0),node_t(2,2)).ontheline(ccccc) << endl;
    cout << "ontheline?: " <<  line_t(node_t(98,109),node_t(0,3)).ontheline(ccccc) << endl;


    //cout << "distance of o to (3,4):" << node_t(3,4)- o << endl;

    segment_t s1(o,a);
    return 0;
}
